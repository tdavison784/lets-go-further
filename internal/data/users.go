package data

import (
	"context"
	"database/sql"
	"errors"
	"golang.org/x/crypto/bcrypt"
	"greenlight.twd.net/internal/validator"
	"time"
)

// ErrDuplicateEmail custom error
var (
	ErrDuplicateEmail = errors.New("duplicate email")
)

// UserModel struct that wraps around our DB connection pool
type UserModel struct {
	DB *sql.DB
}

// User struct used to represent an individual user. Importantly, notice how we are
// using the json:"-" struct tag to prevent the password and version fields appearing
// in any output when we encode it to JSON. Also notice that the Password field uses
// the custom password type.
type User struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  password  `json:"-"`
	Activated bool      `json:"activated"`
	Version   int       `json:"-"`
}

// password struct which contains the plaintext password as well as the hashed version
// for a user. The plaintext field is a *pointer* to type string, so that we're able to
// distinguish between a plaintext password not being present in the struct at all,
// versus a plaintext password which is the empty string "".
type password struct {
	plaintext *string
	hash      []byte
}

// Set method calculates the bcrypt hash of a plaintext password, and stores both
// the has and plaintext versions in the struct.
func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}

	p.plaintext = &plaintextPassword
	p.hash = hash

	return nil
}

// Matches method checks whether the provided plaintext password matches the hashed password
// stored in the struct, returning true if it does, and false if not.
func (p *password) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}

	// otherwise return true, nil
	return true, nil
}

func ValidateEmail(v *validator.Validator, email string) {
	v.Check(email != "", "email", "Email must be provided")
	v.Check(v.Matches(email, validator.EmailRX), "email", "must be a valid email address")
}

func ValidatePassword(v *validator.Validator, password string) {
	v.Check(password != "", "password", "password must not be empty")
	v.Check(len(password) >= 8, "password", "password must be at least 8 bytes long")
	v.Check(len(password) <= 72, "password", "password must not be more then 72 bytes long")
}

func ValidateUser(v *validator.Validator, user *User) {
	v.Check(user.Name != "", "name", "User's Name must not be empty")
	v.Check(len(user.Name) <= 500, "name", "User's Name must be less then 500 bytes")

	// Call the standalone ValidateEmail helper
	ValidateEmail(v, user.Email)

	// If the plaintext password is not nil, call the standalone
	// ValidatePassword helper
	if user.Password.plaintext != nil {
		ValidatePassword(v, *user.Password.plaintext)
	}

	// If the provided has is ever nil, this will be due to a logic error
	// in our codebase (probably because we forgot to set a password for the user)
	// It's a useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation Error map
	// we raise a panic instead
	if user.Password.hash == nil {
		panic("missing hash password for user")
	}
}

// Insert a new user record in the database. Note that the id field, created_at, and version fields
// are all automatically generated by our database, so we use the RETURNING clause to read them
// into our User struct after the insert, the same way we did when creating a movie
func (m UserModel) Insert(user *User) error {

	// define the query
	query := `
		INSERT INTO users (name, email, password_hash, activated)
		VALUES ($1, $2, $3, $4)
		RETURNING id, created_at, version`

	// create args slice to hold all arguments
	args := []any{
		&user.Name,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
	}

	// create a context with a 3-second timeout
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.ID, &user.CreatedAt, &user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return ErrDuplicateEmail
		default:
			return err
		}
	}
	return nil
}
