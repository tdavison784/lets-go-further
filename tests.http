### test successfull calls
GET http://localhost:8000/v1/movies/1
Accept: application/json

###
GET http://localhost:8000/v1/healthcheck
Accept: application/json

###
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "year": 2017, "runtime": "102 mins", "genres": ["family", "adventure"]}

###
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Coco", "year": 2017, "runtime": "105 mins", "genres": ["family", "adventure"]}

###
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Black Panther", "year": 2018, "runtime": "134 mins", "genres": ["action", "adventure"]}

###
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Deadpool", "year": 2016, "runtime": "108 mins", "genres": ["action", "comedy"]}


###
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "The Breakfast Club", "year": 1986, "runtime": "96 mins", "genres": ["drama"]}
###End success Tests

### Tests that will cause failures
### test for unknown field name
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "runtime": "102 mins", "genres": ["family", "adventure"], "stars": 4}


### test for max bytes error
POST localhost:8000/v1/movies
Accept: application/json

< ./large.json


### test for multiple JSON values
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "runtime": "102 mins", "genres": ["family", "adventure"]}{"title": "Tommyboy"}


### test for malformed JSON values
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "runtime": "102 mins", "genres": ["family", "adventure"]} :-()>


### test invalid runtime format
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "runtime": 102, "genres": ["family", "adventure"]}


### test for duplicate genres
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana", "year": 2017, "runtime": "102 mins", "genres": ["family", "family"]}


### test for missing required field
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana",  "runtime": "102 mins", "genres": ["family", "adventure"]}

### test for invalid year
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana",  "year": 1886, "runtime": "102 mins", "genres": ["family", "adventure"]}


### test for no title
POST localhost:8000/v1/movies/
Accept: application/json

{"year": 2017, "runtime": "102 mins", "genres": ["family", "adventure"]}


### test for long title name
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "MoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaMoanaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",  "year": 2017, "runtime": "102 mins", "genres": ["family", "adventure"]}


### test for too many genres
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana",  "year": 2017, "runtime": "102 mins", "genres": ["family", "adventure", "animated", "feelgood", "kids", "islandy"]}


### test for not enough genres
POST localhost:8000/v1/movies/
Accept: application/json

{"title": "Moana",  "year": 2017, "runtime": "102 mins", "genres": []}